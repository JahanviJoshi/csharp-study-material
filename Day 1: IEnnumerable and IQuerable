Q1) what is the difference between IEnummerbale and IQuerble
Ans: IQuerable and IEnumerable are both Interface in c# used for LINQ (Language Integrated Query) operations, 
but they differ in their intended use and performance characteristics.
IEnumerable is designed for working with in-memory collections, while IQuerable is designed for querying data sources that are not entirely in memory, such database.

key difference:
| features          | Ienumerable                                            | IQuerbale                                             |
|-------------------|--------------------------------------------------------|-------------------------------------------------------|
| Data Source       |a)Prmarily for in-memory collections(lists,array,etc    |a)Primarily for quering data sources like database.    |
| Execution         |b)Operations are executed immediately upon calling the  |b)Operations are deferred until enumeration are        |
|                   | LINQ method                                            | executed on the server side (eg database)             |
| Query composition |c)Supports simple LINQ methods, but not as well as for |c)Supports complex query building using chained LINQ    |
|                   | complex query building.                                |  methods and the entire query is translated and       |
|                   |                                                        |  executed at once.                                    |
| Performance       |d)Suitable for smaller datasets and simple operations.  |d)Better performance with large datasets and complex   | 
|                   |                                                        |  queries by leveraging server-side processing.        |
| LINQ Providers    |e)Requires a specific LINQ providers to handle the query|e)Relies on an implementation of IQueryProvider to     |
|                   | (e.g. LINQ to objects)                                 |  execute the server-side data source.                 |
|-------------------|--------------------------------------------------------|-------------------------------------------------------|

Namespace:
IEnumerable: It is defined in the System.Collections namespace.
IQueryable: It is defined in the System.Linq namespace.

In essence:
 -Use IEnumerable when you have data in memory and you need to perform simple filtering, sorting or other operations on that data directly.
 -Use IQuerable when you're querying a data source (like a database) and you need to leverage server-side processing for efficiency especially with large or complex queries.

Example to Understand the Differences Between IEnumerable and IQueryable in C# :
  In this demo, we will create a Console Application to retrieve the data from the SQL Server database using the Entity Framework Database First approach. We are going to fetch the following Student information from the Student table.

Example to Understand the Use of IEnumerable in C#:
Let us modify the Main method of the Program class as shown below. In the example below, we are fetching the top 2 
students from the Students table where the gender is male. But we have split the LINQ query into two statements. 
The first statement contains the where method, and the second statement contains the Take method. Then, using a for 
each loop, we display the top 2 student information. Further, to see what SQL Statement was generated and 
executed on the database by Entity Framework, we are using DBContext.Database.Log = Console.Write statement 
that will log the SQL Script on the Console window.

using System;
using System.Collections.Generic;
using System.Linq;

namespace LINQDemo
{
    class Program
    {
        static void Main(string[] args)
        {
            using (StudentDBContext DBContext = new StudentDBContext())
            {
                //To See What SQL Generated By Entity Framework
                DBContext.Database.Log = Console.Write;

                //Fetch the Top 2 Records from the Students Database table where Gender = Male
                IEnumerable<Student> listStudents = DBContext.Students.Where(x => x.Gender == "Male");
                listStudents = listStudents.Take(2);

                Console.WriteLine("Top 2 Student Where Gender = Male");
                foreach (var std in listStudents)
                {
                    Console.WriteLine(std.FirstName + " " + std.LastName);
                }
            }
              
            Console.ReadKey();
        }
    }
}

As you can see in the above SQL Script, it will not use the TOP clause. So, here, it will fetch all the Male Students from SQL Server to in-memory, and then it will filter the data in memory.

Example to Understand the Use of IQueryable in C#:
Let us modify the Main method of the Program class as shown below to use IQueryable. The following example does the 
same thing as the previous one, but here, we store the query in a variable of IQueryable<Student> type. For this, 
we are using the AsQueryable() method. We are also logging the generated SQL Statement on the Console window.

using System;
using System.Linq;
namespace LINQDemo
{
    class Program
    {
        static void Main(string[] args)
        {
            using (StudentDBContext DBContext = new StudentDBContext())
            {
                //To See What SQL Generated By Entity Framework
                DBContext.Database.Log = Console.Write;

                //Fetch the Top 2 Records from the Students Database table where Gender = Male
                IQueryable<Student> listStudents = DBContext.Students
                                   .AsQueryable()
                                   .Where(x => x.Gender == "Male");
                listStudents = listStudents.Take(2);

                Console.WriteLine("Top 2 Student Where Gender = Male");
                foreach (var std in listStudents)
                {
                    Console.WriteLine(std.FirstName + " " + std.LastName);
                }
            }
              
            Console.ReadKey();
        }
    }
}
Here, we create the LINQ Query using IQueryable. With the above changes in place, now run the application and see the output. 
You should get the following output.

As you can see in the above image, it includes the TOP (2) clause in the SQL Script and then fetches the data 
from the database. That means the filtering is now happening on the database side. With this in mind,
let us discuss the differences between IEnumerable and IQueryable in C#.





